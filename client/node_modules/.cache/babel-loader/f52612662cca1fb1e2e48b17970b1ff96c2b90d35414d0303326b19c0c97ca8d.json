{"ast":null,"code":"const express = require('express');\nconst bcrypt = require('bcrypt');\nconst mysql = require('mysql2');\nconst router = express.Router();\n\n// Database connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  // Your MySQL username\n  password: 'Onkar',\n  // Your MySQL password\n  database: 'registrationDB' // Your database name\n});\n\n// Connect to the database\ndb.connect(err => {\n  if (err) {\n    console.error('Error connecting to database:', err);\n    throw err;\n  }\n  console.log('Connected to MySQL database.');\n});\n\n// Register API\nrouter.post('/register', async (req, res) => {\n  try {\n    // Extract data from request body\n    const {\n      firstName,\n      lastName,\n      mobileNumber,\n      password\n    } = req.body;\n\n    // Validation checks\n    if (!firstName || !lastName || !mobileNumber || !password) {\n      return res.status(400).json({\n        message: 'All fields are required.'\n      });\n    }\n    if (mobileNumber.length !== 10 || isNaN(mobileNumber)) {\n      return res.status(400).json({\n        message: 'Mobile number must be a 10-digit number.'\n      });\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // SQL query to insert the user into the database\n    const query = `\n      INSERT INTO users (firstName, lastName, mobileNumber, password, created_at)\n      VALUES (?, ?, ?, ?, NOW())\n    `;\n\n    // Execute the query\n    db.query(query, [firstName, lastName, mobileNumber, hashedPassword], (err, result) => {\n      if (err) {\n        console.error('Database error:', err);\n        // Handle unique constraint error for mobile number\n        if (err.code === 'ER_DUP_ENTRY') {\n          return res.status(400).json({\n            message: 'Mobile number is already registered.'\n          });\n        }\n        return res.status(500).json({\n          message: 'Error saving user to database.'\n        });\n      }\n\n      // Respond with success\n      res.status(201).json({\n        message: 'User registered successfully.'\n      });\n    });\n  } catch (error) {\n    console.error('Error in /register:', error);\n    res.status(500).json({\n      message: 'Internal server error.'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","mysql","router","Router","db","createConnection","host","user","password","database","connect","err","console","error","log","post","req","res","firstName","lastName","mobileNumber","body","status","json","message","length","isNaN","hashedPassword","hash","query","result","code","module","exports"],"sources":["C:/Users/ganes/OneDrive/Desktop/mern-registration/client/src/components/Registration.js"],"sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcrypt');\r\nconst mysql = require('mysql2');\r\n\r\nconst router = express.Router();\r\n\r\n// Database connection\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root', // Your MySQL username\r\n  password: 'Onkar', // Your MySQL password\r\n  database: 'registrationDB', // Your database name\r\n});\r\n\r\n// Connect to the database\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error('Error connecting to database:', err);\r\n    throw err;\r\n  }\r\n  console.log('Connected to MySQL database.');\r\n});\r\n\r\n// Register API\r\nrouter.post('/register', async (req, res) => {\r\n  try {\r\n    // Extract data from request body\r\n    const { firstName, lastName, mobileNumber, password } = req.body;\r\n\r\n    // Validation checks\r\n    if (!firstName || !lastName || !mobileNumber || !password) {\r\n      return res.status(400).json({ message: 'All fields are required.' });\r\n    }\r\n    if (mobileNumber.length !== 10 || isNaN(mobileNumber)) {\r\n      return res.status(400).json({ message: 'Mobile number must be a 10-digit number.' });\r\n    }\r\n\r\n    // Hash the password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // SQL query to insert the user into the database\r\n    const query = `\r\n      INSERT INTO users (firstName, lastName, mobileNumber, password, created_at)\r\n      VALUES (?, ?, ?, ?, NOW())\r\n    `;\r\n\r\n    // Execute the query\r\n    db.query(query, [firstName, lastName, mobileNumber, hashedPassword], (err, result) => {\r\n      if (err) {\r\n        console.error('Database error:', err);\r\n        // Handle unique constraint error for mobile number\r\n        if (err.code === 'ER_DUP_ENTRY') {\r\n          return res.status(400).json({ message: 'Mobile number is already registered.' });\r\n        }\r\n        return res.status(500).json({ message: 'Error saving user to database.' });\r\n      }\r\n\r\n      // Respond with success\r\n      res.status(201).json({ message: 'User registered successfully.' });\r\n    });\r\n  } catch (error) {\r\n    console.error('Error in /register:', error);\r\n    res.status(500).json({ message: 'Internal server error.' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,KAAK,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAE/B,MAAMG,MAAM,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC;;AAE/B;AACA,MAAMC,EAAE,GAAGH,KAAK,CAACI,gBAAgB,CAAC;EAChCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,MAAM;EAAE;EACdC,QAAQ,EAAE,OAAO;EAAE;EACnBC,QAAQ,EAAE,gBAAgB,CAAE;AAC9B,CAAC,CAAC;;AAEF;AACAL,EAAE,CAACM,OAAO,CAAEC,GAAG,IAAK;EAClB,IAAIA,GAAG,EAAE;IACPC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;IACnD,MAAMA,GAAG;EACX;EACAC,OAAO,CAACE,GAAG,CAAC,8BAA8B,CAAC;AAC7C,CAAC,CAAC;;AAEF;AACAZ,MAAM,CAACa,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC3C,IAAI;IACF;IACA,MAAM;MAAEC,SAAS;MAAEC,QAAQ;MAAEC,YAAY;MAAEZ;IAAS,CAAC,GAAGQ,GAAG,CAACK,IAAI;;IAEhE;IACA,IAAI,CAACH,SAAS,IAAI,CAACC,QAAQ,IAAI,CAACC,YAAY,IAAI,CAACZ,QAAQ,EAAE;MACzD,OAAOS,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA2B,CAAC,CAAC;IACtE;IACA,IAAIJ,YAAY,CAACK,MAAM,KAAK,EAAE,IAAIC,KAAK,CAACN,YAAY,CAAC,EAAE;MACrD,OAAOH,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA2C,CAAC,CAAC;IACtF;;IAEA;IACA,MAAMG,cAAc,GAAG,MAAM3B,MAAM,CAAC4B,IAAI,CAACpB,QAAQ,EAAE,EAAE,CAAC;;IAEtD;IACA,MAAMqB,KAAK,GAAG;AAClB;AACA;AACA,KAAK;;IAED;IACAzB,EAAE,CAACyB,KAAK,CAACA,KAAK,EAAE,CAACX,SAAS,EAAEC,QAAQ,EAAEC,YAAY,EAAEO,cAAc,CAAC,EAAE,CAAChB,GAAG,EAAEmB,MAAM,KAAK;MACpF,IAAInB,GAAG,EAAE;QACPC,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEF,GAAG,CAAC;QACrC;QACA,IAAIA,GAAG,CAACoB,IAAI,KAAK,cAAc,EAAE;UAC/B,OAAOd,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,OAAO,EAAE;UAAuC,CAAC,CAAC;QAClF;QACA,OAAOP,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAiC,CAAC,CAAC;MAC5E;;MAEA;MACAP,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAgC,CAAC,CAAC;IACpE,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3CI,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAyB,CAAC,CAAC;EAC7D;AACF,CAAC,CAAC;AAEFQ,MAAM,CAACC,OAAO,GAAG/B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}